# Overview

Set up a new linux machine from a clean install using Ansible and Stow.

This abuses Ansible intended purpose by running a playbook locally. 

It is run by cloning to `~/.dotfiles` (any other directory should work) then run scripts and ansible-playbooks using the provided Makefile.

The exact roles being run can be configured per host using the hostname. The roles are associated to each host in the root playbook file `site.yml`. 

Only the host that matches the local hostname are ran. This is the case because the inventory file `hosts` is generated during bootstrap, listing only the name of the current host. If you're configuring a new host you'll have to add a new entry to `site.yml`.

Under each entry in the `roles` directory, you'll find standard sub-directories such as `files`, `tasks`, or `meta`. You'll also find the non-standard `stow` sub-directory, which contains files to be symlinked (usually from user's home). This allows us to edit the files in their normal placement in the file system while automatically updating the `~/.dotfiles` repo. These changes can then be committed.

# Installation

1. Clone the repo

```sh
git clone --recurse-submodules git@github.com:rodelrod/dotfiles.git ~/.dotfiles
```

2. Make sure there's a playbook entry for the current hostname and add it if necessary

```sh
vim ~/.dotfiles/site.yml
```

3. Install bootstrap dependencies and setup environment

```sh
cd ~/.dotfiles
sudo ls    # just to make sure the sudo password is cached
make install
```

4. Run the Ansible playbook to synchronize changes

```sh
sudo ls    # just to make sure the sudo password is cached
make sync
```

5. Run Jetbrains Toolbox for the first time and install IntelliJ IDEA

```sh
/opt/jetbrains-toolbox-1.21.9712/jetbrains-toolbox
```

After the first run the Jetbrains Toolbox desktop link will be registered.


# Caveats

- The keylayout setup script removes the comments from `evdev.xml`. This could be fixed by using lxml or injecting the comments.
- Only works for Ubuntu and Pop!_OS right now

# Old Installation
## Install dependencies

```bash
_setup/{OS}/apt
source _setup/{OS}/manual
    
# run the install functions in manual
```


### After installing nix

```bash
_setup/{OS}/nix
source _setup/{OS}/post_nix
# run the install functions in post_nix
```

## Get the submodules (tmux, bashrc, etc.)

1. `git submodule init {PACKAGE}`
2. `git submodule update --merge`

or maybe 

3. `git submodule update --init --recursive

## Use `GNU Stow` to create the necessary symlinks.

```bash
cd  ~/.dotfiles
stow stow    # do this first!
stow bashrc
stow tmux
tmux source-file ~/.tmux.conf          # registers systemd unit to launch tmux server on startup
stow vim-config
sudo stow -t /usr/share/X11/xkb keylayout
cd keylayout && sudo ./setup && cd ..  # install layout in evdev.xml
stow idea
stow gitconfig
stow nixnote
cd nixnote && ./setup && cd ..         # register evernote handler in mimeapps.list
stow org-protocol
cd org-protocol && ./setup && cd ..    # register org-protocol handler in mimeapps.list
stow pop-os

# Specific fixes for PopOS 20.04
sudo pop-os-systemd
sudo systemctl enable wifi-resume.service
stow google-meet

# Specifix fixes for Marlene
stow azure-ubuntu-vm
```

## Track Org files in git

Create a separate git root to keep it out of Dropbox:


```
mkdir ~/.gitroots
git clone --separate-git-dir="/home/rodelrod/.gitroots/org.git" git@gitlab.com:rodelrod/org.git ~/Dropbox/Org
```

Setup it up from the ~/.dotfiles directory with GNU stow:

```
stow org-commit
cd org-commit && ./setup && cd ..      # add cron to commit org files every 15 minutes
```

## Check for changes in Gnome key bindings

```
cd keybindings && ./pull && git diff
```
